<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.github.davidcarboni</groupId>
	<artifactId>releaser</artifactId>
	<version>0.0.2-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>Releaser</name>
	<description>
		An example for getting your GitHub project to Maven Central. Demonstrates required POM information and release plugin configuration. 
		Many thanks to: http://datumedge.blogspot.co.uk/2012/05/publishing-from-github-to-maven-central.html
	</description>
	<url>https://github.com/davidcarboni/releaser</url>

	<licenses>
		<license>
			<name>GNU Lesser General Public License (LGPL)</name>
			<url>http://www.gnu.org/licenses/lgpl.html</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<scm>
		<url>https://github.com/davidcarboni/releaser</url>
		<connection>scm:git:git://github.com/davidcarboni/releaser.git</connection>
		<developerConnection>scm:git:git@github.com:davidcarboni/releaser.git</developerConnection>
		<tag>HEAD</tag>
	</scm>

	<!-- You'll probably want to test this out with a local copy of Nexus OSS. -->
	<!-- Change these to the Sonatype Nexus repositories, to match settings.xml 
		as described above when you actually want to release. -->
	<distributionManagement>
		<snapshotRepository>
			<id>localhost-nexus-snapshots</id>
			<name>Local Nexus snapshot repository</name>
			<url>http://localhost:8081/nexus/content/repositories/snapshots/</url>
		</snapshotRepository>
		<repository>
			<id>localhost-nexus-staging</id>
			<name>Local Nexus release repository</name>
			<url>http://localhost:8081/nexus/content/repositories/releases/</url>
		</repository>
	</distributionManagement>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>

		<!-- Include the README, NOTICE and LICENSE files: -->
		<resources>
			<resource>
				<directory>${project.basedir}</directory>
				<includes>
					<include>README*</include>
					<include>NOTICE*</include>
					<include>LICENSE*</include>
				</includes>
			</resource>
		</resources>

		<plugins>

			<!-- This configures the build to use JVM 1.6 compliance: -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>

			<!-- This configures the manifest: -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
					</archive>
				</configuration>
			</plugin>

			<!-- Source JAR -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>2.2.1</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<phase>verify</phase>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Javadoc JAR -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.9.1</version>
				<executions>
					<execution>
						<id>attach-javadoc</id>
						<phase>verify</phase>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Release -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.4.1</version>
				<configuration>

					<!-- Automated passphrase entry: -->

					<!-- To pass your passphrase to the build automatically, so avoiding 
						manual interaction, you'll need to put the passphrase into settings.xml. 
						You don't really want that to be in plain text, so you'll want to follow: 
						http://maven.apache.org/guides/mini/guide-encryption.html -->
					<!-- <arguments>-Dgpg.passphrase=${gpg.passphrase}</arguments> -->

					<!-- Manual passphrase entry: -->

					<!-- This is the simplest secure solution, but requires you to type 
						your key passphrase in manually when performing a release. No biggie unless 
						you want your CI server to decide when to release for you. -->
					<mavenExecutorId>forked-path</mavenExecutorId>

				</configuration>
			</plugin>

		</plugins>
	</build>

	<profiles>

		<!-- GPG Signature on release -->
		<profile>
			<id>release-sign-artifacts</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>1.4</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>

	<developers>
		<developer>
			<id>david</id>
			<name>David Carboni</name>
			<email>david@carboni.co</email>
			<organization>Carboni</organization>
			<organizationUrl>https://github.com/davidcarboni</organizationUrl>
			<url>https://github.com/davidcarboni</url>
		</developer>
	</developers>

</project>